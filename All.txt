Pengenalan NodeJS
NodeJS diperkenalkan pertama kali oleh Ryan Dahl pada tahun 2009
NodeJS merupakan teknologi yang bisa digunakan untuk menjalankan kode JavaScript diluar Web Browser
NodeJS dibuat dari V8 Engine, yaitu Engine untuk Google Chrome
NodeJS merupakan project yang Free dan OpenSource
https://nodejs.org/ 

Kenapa Belajar NodeJS
NodeJS mempopulerkan paradigma JavaScript Everywhere, dimana dengan menggunakan NodeJS, kita bisa membuat aplikasi berbasis server side dengan bahasa pemrograman JavaScript
Hal ini membuat kita hanya butuh belajar bahasa pemrograman JavaScript untuk membuat aplikasi web misalnya, sehingga tidak butuh belajar bahasa pemrograman lain seperti PHP atau Java untuk server side web nya
Saat ini NodeJS sangat populer dan banyak sekali digunakan di perusahaan teknologi, terutama untuk membantu pengembangan Web Frontend

Yang Tidak Bisa Dilakukan di NodeJS
Pada kelas JavaScript, kita sudah membahas banyak sekali fitur JavaScript yang berjalan di Browser
Karena NodeJS tidak berjalan di Browser, jadi tidak semua fitur JavaScript bisa dilakukan di NodeJS
Fitur seperti Document Object Model dan banyak Web API tidak bisa dilakukan di NodeJS, hal ini karena DOM dan beberapa Web API berjalan membutuhkan Browser

Text Editor
NodeJS menggunakan bahasa pemrograman JavaScript, oleh karena itu kita bisa menggunakan Text Editor apapun untuk membuat aplikasi menggunakan NodeJS, misal :
Visual Studio Code
JetBrains WebStorm
Sublime
Atom
NodePad++
Dan lain-lain

Web Application
Web Application adalah aplikasi yang berjalan di Server dan ditampilkan di Browser Client
Saat kita membuat Web Application, biasanya akan dibagi menjadi 3 bagian, Client, Server dan Database

Diagram Web Application

Client
Client merupakan user interface atau bagian frontend dari web application, yang digunakan oleh pengguna web application
Client digunakan untuk berinteraksi dengan Server, baik itu mengirim data atau menerima data
Frontend biasanya dibuat menggunakan HTML, CSS dan JavaScript

Server
Server bertanggung jawab untuk menerima request dari Client, mengerjakan request yang dikirim dan membalas request berupa response ke Client
Server bertugas sebagai backend untuk web application, dimana semua logic aplikasi akan dilakukan di Server
Biasanya Server dibuat menggunakan PHP, Pythton, Java, .NET dan banyak bahasa pemrograman lainnya
Dengan adanya NodeJS, sekarang kita bisa membuat Server menggunakan JavaScript

Database
Database adalah tempat untuk menyimpan data web application
Data disimpan dan diambil oleh Server. 
Client tidak bisa langsung mengambil atau menyimpan data ke Database secara langsung, oleh karena itu perlu penengah untuk melakukannya, yaitu Server
Database biasanya menggunakan aplikasi sistem basis data seperti misalnya MySQL, PostgreSQL, MongoDB dan lain-lain

Concurrency dan Parallel

Sejarah 
Dahulu, komputer hanya menjalankan sebuah program pada satu waktu
Karena hanya bisa menjalankan satu program pada satu waktu, hal ini tidak efisien dan memakan waktu lama karena hanya bisa mengerjakan satu tugas pada satu waktu
Semakin kesini, sistem operasi untuk komputer semakin berkembang, sekarang sistem operasi bisa menjalankan program secara bersamaan dalam proses yang berbeda-beda, terisolasi dan saling independen antar program

Thread
Program biasanya berjalan dalam sebuah proses, dan proses akan memiliki resource yang independen dengan proses lain
Sekarang, sistem operasi tidak hanya bisa menjalankan multiple proses, namun dalam proses kita bisa menjalankan banyak pekerjaan sekaligus, atau bisa dibilang proses ringan atau lebih dikenal dengan nama Thread
Thread membuat proses aplikasi bisa berjalan tidak harus selalu sequential, kita bisa membuat proses aplikasi berjalan menjadi asynchronous atau parallel

Concurrency vs Parallel
Kadang banyak yang bingung dengan concurrency dan parallel, sebenarnya kita tidak perlu terlalu memusingkan hal ini
Karena saat ini, kita pasti akan menggunakan keduanya ketika membuat aplikasi
Concurrency artinya mengerjakan beberapa pekerjaan satu persatu
Parallel artiya mengerjakan beberapa pekerjaan sekaligus pada satu waktu

Diagram Concurrency

Diagram Parallel

Contoh Concurrency dan Parallel
Browser adalah aplikasi yang concurrent dan parallel
Browser akan melakukan proses concurrent ketika membuka web, browser akan melakukan http request, lalu mendownload semua file web (html, css, js) lalu merender dalam bentuk tampilan web
Browser akan melakukan proses parallel, ketika kita membuka beberapa tab web, dan juga sambil download beberapa file, dan menonton video dari web streaming 

Synchronous vs Asynchronous
Saat membuat aplikasi yang concurrent atau parallel, kadang kita sering menemui istilah synchronous dan asynchronous
Tidak perlu bingung dengan istilah tersebut, secara sederhana
Synchronous adalah ketika kode program kita berjalan secara sequential, dan semua tahapan ditunggu sampai prosesnya selesai baru akan dieksekusi ke tahapan selanjutnya
Sedangkan, Asynchronous artinya ketika kode program kita berjalan dan kita tidak perlu menunggu eksekusi kode tersebut selesai, kita bisa lanjutkan ke tahapan kode program selanjutnya

Diagram Synchronous

Diagram Asynchronous

Threadpool Web Model

Threadpool
Pada materi sebelumnya sudah dijelaskan bahwa thread adalah proses ringan yang biasa dibuat saat membuat aplikasi
Walaupun bisa dibilang ringan, namun jika terlalu banyak membuat thread, maka tetap akan memberatkan sistem operasi kita
Oleh karena itu, biasanya kita akan menggunakan threadpool untuk melakukan management thread
Threadpool merupakan tempat dimana kita menyimpan thread, ketika kita butuh kita akan ambil dari threadpool, ketika sudah selesai, kita akan kembalikan thread nya ke threadpool
Dengan threadpool, kita bisa memanfaatkan thread yang sama berkali-kali, tanpa harus membuat thread baru terus menerus

Diagram Threadpool

Threadpool Queue
Apa yang terjadi ketika semua thread sedang bekerja? Bagaimana jika kita ingin meminta thread ke threadpool untuk mengerjakan sesuatu?
Jika semua thread penuh, kita tidak bisa meminta lagi thread ke threadpool. Kita harus menunggu sampai ada thread yang tidak sibuk
Dimana kita harus menunggu sampai ada thread tersedia untuk digunakan?
Biasanya threadpool memiliki tempat untuk menyimpan tugas yang belum dikerjakan oleh thread di tempat bernama queue (antrian)
Ketika kita mengirim perintah ke threadpool, perintah tersebut akan dikirim ke queue, lalu perintah-perintah itu akan dieksekusi satu per satu oleh thread yang tersedia di threadpool

Diagram Threadpool Queue

Threadpool Web Model
Dahulu pembuatan web application sangat populer menggunakan threadpool model
Setiap request yang masuk ke web server akan diproses oleh satu buah thread
Dengan demikian ketika banyak request masuk, semua bisa diproses secara paralel karena akan ditangani oleh thread masing-masing
Namun threadpool model ini memiliki kekurangan, ketika thread sedang sibuk semua, secara otomatis request selanjutnya harus menunggu sampai ada thread yang selesai melakukan tugas sebelumnya
Contoh web server yang menggunakan threadpool model, seperti Apache HTTPD, Apache Tomcat, dan lain-lain

Blocking dan Non-Blocking

Blocking
Saat kita membuat kode program, secara default kode program akan berjalan secara blocking atau synchronous
Artinya kita harus menunggu sebuah kode selesai sebelum kode selanjutnya dieksekusi
Contoh ketika kita membuat kode program untuk membaca file, jika kode kita blocking, maka kita harus menunggu program selesai membaca file, baru kita bisa melanjutkan kode program selanjutnya

Non-Blocking
Non-Blocking berbeda dengan Blocking, kode program Non-Blocking akan dieksekusi tanpa harus menunggu kode program tersebut selesai
Non-Blocking akan dijalankan secara asynchronous
Ketika memanggil kode Non-Blocking, biasanya kita perlu mengirimkan callback untuk dipanggil oleh kode Non-Blocking tersebut ketika kodenya susah selesai
Contoh-contoh Non-Blocking sudah kita bahas di kelas JavaScript Async, seperti AJAX, Fetch API, dan lain-lain
Di NodeJS, hampir semua fiturnya mendukung kode Non-Blocking

NodeJS Architecture

NodeJS Architecture

Event-Loop
Event-Loop merupakan single thread proses yang digunakan untuk mengeksekusi kode Non-Blocking
Karena Event-Loop hanya menggunakan single thread, maka kita harus berhati-hati ketika membuat blocking code, karena bisa memperlambat proses eksekusi kode kita
Event-Loop sendiri sebenarnya tugasnya hanya menerima dan mengirim eksekusi kode ke C++ Threadpool, oleh karena itu selalu usahakan menggunakan kode nonblocking agar proses blocking-nya dikerjakan di C++ threadpool
Event-Loop akan menerima response dari C++ threadpool yang di kirim via callback

C++ Threadpool
NodeJS Menggunakan C++ Threadpool untuk workernya, yaitu threadpool untuk melakukan pekerjaan
Libuv adalah library yang digunakan di NodeJS, dimana secara default libuv menggunakan 4 thread di dalam threadpool nya, hal ini menjadikan kita bisa melakukan 4 pekerjaan blocking sekaligus dalam satu waktu.
Jika terlalu banyak pekerjaan blocking, kita bisa mengubah jumlah thread di libuv dengan pengaturan environment variable UV_THREADPOOL_SIZE 
http://docs.libuv.org/en/v1.x/threadpool.html 

Menginstall NodeJS

Menginstall NodeJS Manual
Download versi NodeJS LTS (Long Term Support)
https://nodejs.org/en/download/ 

Menginstall NodeJS dengan Package Manager
https://github.com/nvm-sh/nvm 
https://community.chocolatey.org/packages/nodejs 
https://formulae.brew.sh/formula/node 

Setting PATH NodeJS
Setelah menginstall NodeJS, disarankan melakukan setting PATH NodeJS pada sistem operasi kita
Hal ini agar mudah ketika kita mengakses program NodeJS menggunakan terminal / command prompt

Kode : Mengecek NodeJS
